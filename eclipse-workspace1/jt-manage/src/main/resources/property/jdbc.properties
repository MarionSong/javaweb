jdbc.driverClassName=com.mysql.jdbc.Driver

jdbc.url=jdbc:mysql://127.0.0.1:3306/jtdb?useUnicode=true&characterEncoding=UTF-8

jdbc.username=root
jdbc.password=root
#初始化连接数量
jdbc.initialSize=10
#最大并发连接数
jdbc.maxActive=100
#已经不再使用，配置了也没效果
jdbc.maxIdle=10
#最小空闲连接数
jdbc.minIdle=5
#获取连接等待超时的时间
jdbc.maxWait=5000

#用来检测连接是否有效的sql，要求是一个查询语句
jdbc.validationQuery=SELECT * FROM USER
#单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法
jdbc.validationQueryTimeout=3
#申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
jdbc.testWhileIdle=true
#申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能
jdbc.testOnBorrow=false
#归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能
jdbc.testOnReturn=false

#连接保活
#打开KeepAlive之后的效果：
#1、初始化连接池时会填充到minIdle数量。
#2、连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。
#3、当网络断开等原因产生的由ExceptionSorter检测出来的死连接被清除后，自动补充连接到minIdle数量。
jdbc.keepAlive=true

#对于建立时间超过removeAbandonedTimeout的连接强制关闭（连接泄露自动检测）
jdbc.removeAbandoned=true
#连接建立多长时间就需要被强制关闭（1800秒，也就是30分钟）（连接长时间没有使用，被认为发生泄露时长）
jdbc.removeAbandonedTimeout=1800

#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
#jdbc.timeBetweenEvictionRunsMillis=60000
jdbc.timeBetweenEvictionRunsMillis=60000
#连接保持空闲而不被驱逐的最长时间（Destory线程中如果检测到当前连接的最后活跃时间和当前时间的差值大于minEvictableIdleTimeMillis，则关闭当前连接）。单位是毫秒
#jdbc.minEvictableIdleTimeMillis=1800000
#jdbc.minEvictableIdleTimeMillis=300000
jdbc.minEvictableIdleTimeMillis=60000

#是否打开PreparedStatementCache，并且指定每个连接上PSCache的大小
jdbc.poolPreparedStatements=true
#指定每个连接上PSCache的大小
jdbc.maxPoolPreparedStatementPerConnectionSize=500

#关闭abanded连接时输出错误日志
jdbc.logAbandoned=true
#属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 常用的插件有： 监控统计用的filter:stat     日志用的filter:log4j   防御sql注入的filter:wall
jdbc.filters=stat,wall